/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.jtwitterstats;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.*;
import static com.mongodb.client.model.Filters.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.bson.Document;

/**
 *
 * @author JUANM
 */
public class Filtro extends javax.swing.JFrame {

    private Mongo m;
    private MongoDatabase database;
    private MongoCollection<Document> col;
    private List<JTextField> campos;

    private MongoCollection<Document> resultadocol;

    private boolean descarto = false;

    /**
     * Creates new form Filtro
     */
    public Filtro(Mongo m) {
        initComponents();
        this.m = m;
        this.col = m.getCol();
        this.database = m.getDatabase();
        campos = new ArrayList<>();
        campos.add(textotweet);
        campos.add(palabrasclave);
        campos.add(nombreusuario1);
        campos.add(hashtag);

    }

    /*public void buscartext() {

        MongoCollection<Document> nuevacol = col;
        String consulta = "";

        for (int i = 0; i < busqueda.length; i++) {
            JTextField campo = campos.get(i);
            String texto = campo.getText();
            if (!texto.isEmpty()) {

                nuevacol.createIndex(Indexes.text(busqueda[i]));
                consulta += texto;
                consulta += " ";
                //nuevacol.drop(Indexes.text(busquedas[i]));
            }
        }

        if (consulta.isEmpty()) {
            long matchCount = nuevacol.countDocuments(Filters.text(consulta));
            JOptionPane.showMessageDialog(null, "Text search matches: " + matchCount);
        } else {
            JOptionPane.showMessageDialog(null, "Al menos un criterio de busqueda es obligatorio.");
        }
    }*/
    public Set<Document> buscartext2() {

        MongoCollection<Document> nuevacol = col;

        JTextField campo = campos.get(0);
        String texto = campo.getText();
        Set<Document> nuevo = new HashSet<>();
        if (!texto.isEmpty()) {
            nuevacol.createIndex(Indexes.text("text"));
            nuevo = nuevacol.find(text(texto)).into(new HashSet<>());

            return nuevo;
        }
        return null;

    }

    public Set<Document> findpalabraclave() {

        JTextField campo = campos.get(1);
        String texto = campo.getText();

        Set<Document> nuevo = new HashSet<>();
        if (!texto.isEmpty()) {
            nuevo = col.find(eq("palabraclave", texto)).into(new HashSet<>());
            return nuevo;
        }
        return null;
    }

    public Set<Document> findusuario() {

        JTextField campo = campos.get(2);
        String texto = campo.getText();
        Set<Document> nuevo = new HashSet<>();
        if (!texto.isEmpty()) {
            nuevo = col.find(eq("user.screenName", texto)).into(new HashSet<>());
            return nuevo;
        }
        return null;
    }

    public Set<Document> findhashtag() {

        JTextField campo = campos.get(3);
        String texto = campo.getText();

        Set<Document> nuevo = new HashSet<>();
        if (!texto.isEmpty()) {
            nuevo = col.find(eq("hashtagEntities.text", texto)).into(new HashSet<>());
            return nuevo;
        }
        return null;
    }

    public Set<Document> descartarRetweets() {

        Set<Document> nuevo = new HashSet<>();

        nuevo = col.find(eq("isRetweeted", false)).into(new HashSet<>());
        return nuevo;
    }

    private void borrarDocs() {

        database.getCollection("salida").deleteMany(new Document());
        
    }
    
    private void insertarDocs(Set<Document> docs) {

        resultadocol = database.getCollection("salida");
        int n = docs.size();
        List<Document> aList = new ArrayList<Document>(n);
        for (Document x : docs) {
            aList.add(x);
        }
        resultadocol.insertMany(aList);
    }

    /*public List<Document> descartarretweet(List<Document> a) {

    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textotweet = new javax.swing.JTextField();
        L_textodeltweet = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        palabrasclave = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nombreusuario1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        hashtag = new javax.swing.JTextField();
        descartar = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        L_textodeltweet.setText("Palabras en el texto del tweet");

        jLabel1.setText("Palabras clave");

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre de usuario");

        jLabel3.setText("Hashtag");

        descartar.setText("Descartar retweets");
        descartar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descartarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 291, Short.MAX_VALUE)
                        .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(L_textodeltweet, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descartar)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(textotweet, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                .addComponent(hashtag, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nombreusuario1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(palabrasclave, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(L_textodeltweet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textotweet, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(palabrasclave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(nombreusuario1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashtag, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(descartar)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
        
        
        List<Set<Document>> resultados = new ArrayList<>();

        Set<Document> docs = new HashSet<>();
        docs = buscartext2();
        if (docs != null) {
            resultados.add(docs);
        }
        docs = findusuario();
        if (docs != null) {
            resultados.add(docs);
        }
        docs = findhashtag();
        if (docs != null) {
            resultados.add(docs);
        }
        docs = findpalabraclave();
        if (docs != null) {
            resultados.add(docs);
        }

        if (descarto) {
            docs = descartarRetweets();
            if (docs != null) {
                resultados.add(docs);
            }
        }

        Set<Document> interseccion = new HashSet<>();
        if (resultados.size() > 0) {
            interseccion = resultados.get(0);
            for (int i = 1; i < resultados.size(); i++) {
                interseccion.retainAll(resultados.get(i));
            }

        }
        //JOptionPane.showMessageDialog(null, "Text search matches: " + interseccion.size());

        borrarDocs();
        insertarDocs(interseccion);
        JOptionPane.showMessageDialog(null, "Documentos guardados: " + interseccion.size());

    }//GEN-LAST:event_buscarActionPerformed

    private void descartarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descartarActionPerformed
        // TODO add your handling code here:

        if (descartar.isSelected()) {
            descarto = true;
        } else {
            descarto = false;
        }
    }//GEN-LAST:event_descartarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Filtro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Filtro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Filtro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Filtro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L_textodeltweet;
    private javax.swing.JButton buscar;
    private javax.swing.JToggleButton descartar;
    private javax.swing.JTextField hashtag;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField nombreusuario1;
    private javax.swing.JTextField palabrasclave;
    private javax.swing.JTextField textotweet;
    // End of variables declaration//GEN-END:variables
}
